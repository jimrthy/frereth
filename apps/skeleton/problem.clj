(.deleteOnExit (java.io.File. "/tmp/form-init3700738612654537979.clj")) (do (set! *warn-on-reflection* nil) (do nil (try (clojure.core/require (quote clojure.tools.nrepl.server)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote clojure.tools.nrepl.server) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote complete.core)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote complete.core) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.version)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.version) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.undef)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.undef) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.track-state)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.track-state) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.trace)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.trace) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.test)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.test) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.stacktrace)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.stacktrace) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.resource)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.resource) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.refresh)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.refresh) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.pprint)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.pprint) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.pprint)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.pprint) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.out)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.out) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.ns)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.ns) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.macroexpand)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.macroexpand) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.inspect)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.inspect) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.info)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.info) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.format)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.format) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.enlighten)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.enlighten) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.debug)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.debug) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.complete)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.complete) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.classpath)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.classpath) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.apropos)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.apropos) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote cemerick.piggieback)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cemerick.piggieback) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (try (clojure.core/require (quote clojure.tools.nrepl.middleware.render-values)) (catch java.lang.Throwable t__11809__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote clojure.tools.nrepl.middleware.render-values) ":") (clojure.core/or (.getMessage t__11809__auto__) (clojure.core/type t__11809__auto__))))) (set! *print-length* 50 do (clojure.core/require (quote whidbey.repl)) (whidbey.repl/init! {:width 180, :map-delimiter "", :extend-notation true, :print-meta true, :color-scheme {}, :print-color true}))) (require (quote pjstadig.humane-test-output)) (pjstadig.humane-test-output/activate!) (do (clojure.core/when (try (java.lang.Class/forName "sun.misc.Signal") (catch java.lang.ClassNotFoundException e__11801__auto__)) (try (sun.misc.Signal/handle (sun.misc.Signal. "INT") (clojure.core/proxy [sun.misc.SignalHandler] [] (leiningen.repl/handle [signal__11802__auto__]))) (catch java.lang.Throwable e__11801__auto__))) (clojure.core/let [server__11804__auto__ (clojure.tools.nrepl.server/start-server :bind "127.0.0.1" :port 0 :ack-port 46877 :handler (clojure.tools.nrepl.server/default-handler (var cider.nrepl.middleware.version/wrap-version) (var cider.nrepl.middleware.undef/wrap-undef) (var cider.nrepl.middleware.track-state/wrap-tracker) (var cider.nrepl.middleware.trace/wrap-trace) (var cider.nrepl.middleware.test/wrap-test) (var cider.nrepl.middleware.stacktrace/wrap-stacktrace) (var cider.nrepl.middleware.resource/wrap-resource) (var cider.nrepl.middleware.refresh/wrap-refresh) (var cider.nrepl.middleware.pprint/wrap-pprint-fn) (var cider.nrepl.middleware.pprint/wrap-pprint) (var cider.nrepl.middleware.out/wrap-out) (var cider.nrepl.middleware.ns/wrap-ns) (var cider.nrepl.middleware.macroexpand/wrap-macroexpand) (var cider.nrepl.middleware.inspect/wrap-inspect) (var cider.nrepl.middleware.info/wrap-info) (var cider.nrepl.middleware.format/wrap-format) (var cider.nrepl.middleware.enlighten/wrap-enlighten) (var cider.nrepl.middleware.debug/wrap-debug) (var cider.nrepl.middleware.complete/wrap-complete) (var cider.nrepl.middleware.classpath/wrap-classpath) (var cider.nrepl.middleware.apropos/wrap-apropos) (var cemerick.piggieback/wrap-cljs-repl) (var clojure.tools.nrepl.middleware.render-values/render-values))) port__11805__auto__ (:port server__11804__auto__) repl-port-file__11806__auto__ (clojure.core/apply clojure.java.io/file ["/home/jimrthy/projects/snowcrash/frereth/apps/skeleton" ".nrepl-port"]) legacy-repl-port__11807__auto__ (if (.exists (clojure.java.io/file "/home/jimrthy/projects/snowcrash/frereth/apps/skeleton/target")) (clojure.java.io/file "/home/jimrthy/projects/snowcrash/frereth/apps/skeleton/target" "repl-port"))] (clojure.core/when false (clojure.core/println "nREPL server started on port" port__11805__auto__ "on host" "127.0.0.1" (clojure.core/str "- nrepl://" "127.0.0.1" ":" port__11805__auto__))) (clojure.core/spit (clojure.core/doto repl-port-file__11806__auto__ .deleteOnExit) port__11805__auto__) (clojure.core/when legacy-repl-port__11807__auto__ (clojure.core/spit (clojure.core/doto legacy-repl-port__11807__auto__ .deleteOnExit) port__11805__auto__)) (clojure.core/deref (clojure.core/promise)))))